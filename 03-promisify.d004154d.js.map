{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AACA,MAAMA,EAAQC,GAEJ,IAAIC,QAAQC,IAChBC,WAAW,KACRD,EAAQF,IACRA,KAIHI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,MAAMK,EAAQ,CACX,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGrBC,EAAkB,CAACC,EAAUC,KAC1BC,MAAAA,EAAeF,EAASG,IAAIC,GAC/BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAEzDhB,OAAAA,QAAQC,QAAQa,IAQ1BH,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC9BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGjDK,EAAkBC,GACd,IAAIzB,QAAQ,CAACC,EAASyB,KACpB5B,MAAAA,EAAQoB,EAA0B,IAAK,KAC7ChB,WAAW,KACWmB,KAAKE,SAAW,GAGhCtB,EAAQ,CAAE0B,GAAIF,EAAYE,GAAIvB,KAAMN,IAEpC4B,EAAOD,EAAYE,KAEtB7B,KAIH8B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACvBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG3CyB,EAAWF,IACdtB,QAAQyB,qCAAqCH,+BAUhDH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH","file":"03-promisify.d004154d.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\nconst delay = ms => {\n   // Change this function\n   return new Promise(resolve => {\n      setTimeout(() => {\n         resolve(ms);\n      }, ms);\n   });\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\nconst users = [\n   { name: 'Mango', active: true },\n   { name: 'Poly', active: false },\n   { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n   const updatedUsers = allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user,\n   );\n   return Promise.resolve(updatedUsers);\n};\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// ======================= Subtask 3 =======================\nconst randomIntegerFromInterval = (min, max) => {\n   return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n   return new Promise((resolve, reject) => {\n      const delay = randomIntegerFromInterval(200, 500);\n      setTimeout(() => {\n         const canProcess = Math.random() > 0.3;\n\n         if (canProcess) {\n            resolve({ id: transaction.id, time: delay });\n         } else {\n            reject(transaction.id);\n         }\n      }, delay);\n   });\n};\n\nconst logSuccess = ({ id, time }) => {\n   console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n   console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}